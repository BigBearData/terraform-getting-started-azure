name: 0.2.$(Rev:r)

trigger:
  batch: true
  branches:
    include:
      - azureaiconf.6.21

pr:
  autoCancel: true
  drafts: true
  branches:
    include:
      - azureaiconf.6.21

pool:
  vmImage: ubuntu-latest
  
variables:
  - group: azure-env
  - group: terraform-backend
  - group: terraform-version
  - name: tf_in_automation
    value: true
  - name: project_folder
    value: infrastructure

stages:
  - stage: 'build'

    jobs:
      - job: 
        displayName: 'Infrastructure Plan'
        steps:
          - checkout: self
            fetchDepth: 1

          - template: '../pipeline-templates/prepare-credentials.yml'
          - template: '../pipeline-templates/pin-terraform.yml'
          - template: '../pipeline-templates/terraform-init.yml'

          - task: Bash@3
            name: 'terraform_plan'
            displayName: 'Terraform Plan'
            env:
              ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AZURE_TENANT_ID)
            inputs:
              targetType: 'inline'
              workingDirectory: $(project_folder)
              script: |
                set -euo pipefail

                if [ ${BUILD_REASON} == 'PullRequest' ]; then
                  export TF_CLI_ARGS="-lock=false"
                fi

                # Allow non-zero exit code in this block so we can detect no-op plans.
                set +e
                terraform plan \
                  -detailed-exitcode \
                  -input=false \
                  -var="resource_group_name=${AZURE_ENV_RG}" \
                  -out ${BUILD_BUILDNUMBER}.tfplan
                terraform_exit_code=$?
                set -e

                echo "Terraform exit code: ${terraform_exit_code}"

                # Terraform plan returns 2 when there are changes
                if [ ${terraform_exit_code} -eq 2 ]; then
                  # Output that terraform apply is needed
                  echo "##vso[task.setvariable variable=tf_apply;isOutput=true]true"

                  # Override the exit code
                  exit 0
                fi

                # Terraform plan returns 0 for no-op plans, and 1 for errors
                # In either case, terraform apply is not needed
                echo "##vso[task.setvariable variable=tf_apply;isOutput=true]false"

                # Return the original exit code from terraform plan
                exit ${terraform_exit_code}

          - task: ArchiveFiles@2
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['terraform_plan.tf_apply'], 'true'))
            displayName: 'Create Plan Artifact'
            inputs:
              rootFolderOrFile: '$(project_folder)'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).tgz'
              replaceExistingArchive: true

          - task: PublishPipelineArtifact@1
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['terraform_plan.tf_apply'], 'true'))
            displayName: 'Publish Plan Artifact'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'plan'

  - stage: deploy
    jobs:
      - deployment: terraform
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Change Infrastructure'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: ExtractFiles@1
                  displayName: 'Extract Plan Artifact'
                  inputs:
                    archiveFilePatterns: '$(Pipeline.Workspace)/plan/$(Build.BuildNumber).tgz'
                    destinationFolder: '$(project_folder)/'
                    cleanDestinationFolder: true

                - template: '../pipeline-templates/prepare-credentials.yml'
                - template: '../pipeline-templates/pin-terraform.yml'

                - task: Bash@3
                  displayName: 'Terraform Apply'
                  env:
                    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
                    ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
                    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
                    ARM_TENANT_ID: $(AZURE_TENANT_ID)
                  inputs:
                    targetType: 'inline'
                    workingDirectory: $(project_folder)
                    script: |
                      set -euo pipefail
      
                      terraform apply \
                        -input=false \
                        ${BUILD_BUILDNUMBER}.tfplan