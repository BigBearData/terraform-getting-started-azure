name: 0.2.$(Rev:r)

trigger:
  batch: true
  branches:
    include:
      - azureaiconf.6.21

pr:
  autoCancel: true
  drafts: true
  branches:
    include:
      - azureaiconf.6.21

pool:
  vmImage: ubuntu-latest
  
variables:
  - group: azure-env
  - group: terraform-backend
  - group: terraform-version
  - name: tf_in_automation
    value: true
  - name: project_folder
    value: .

stages:
  - stage: 'build'

    jobs:
      - job: 
        displayName: 'Infrastructure Plan'
        steps:
          - checkout: self
            fetchDepth: 1

          - template: 'pipeline-templates/prepare-credentials.yml'
          - template: 'pipeline-templates/pin-terraform.yml'
          - template: 'pipeline-templates/terraform-init.yml'

          - task: Bash@3
            displayName: 'Terraform Plan'
            env:
              ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AZURE_TENANT_ID)
            inputs:
              targetType: 'inline'
              workingDirectory: $(project_folder)
              script: |
                set -euo pipefail

                if [ ${BUILD_REASON} == 'PullRequest' ]; then
                  export TF_CLI_ARGS="-lock=false"
                fi

                terraform plan \
                  -input=false \
                  -var="resource_group_name=${AZURE_ENV_RG}" \
                  -out ${BUILD_BUILDNUMBER}.tfplan

          - task: ArchiveFiles@2
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            displayName: 'Create Plan Artifact'
            inputs:
              rootFolderOrFile: '$(project_folder)'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
            displayName: 'Publish Plan Artifact'

          - task: PublishPipelineArtifact@1
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            displayName: 'Publish Plan Artifact'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'plan'

  - stage: Deploy
    jobs:
      - deployment: DeployDev
        displayName: 'Dev Environment Deployment'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none

                - task: DownloadBuildArtifacts@0
                  inputs:
                    artifactName: 'drop'
                  displayName: 'Download Plan Artifact'

                - task: ExtractFiles@1
                  inputs:
                    archiveFilePatterns: '$(System.ArtifactsDirectory)/drop/$(Build.BuildId).tgz'
                    destinationFolder: '$(System.DefaultWorkingDirectory)/'
                    cleanDestinationFolder: false
                  displayName: 'Extract Plan Artifact'

                - template: 'pipeline-templates/prepare-credentials.yml'
                - template: 'pipeline-templates/pin-terraform.yml'

                - task: Bash@3
                  inputs:
                    filePath: './scripts/terraform-apply.sh'
                    arguments: '$(Build.SourcesDirectory)'
                    failOnStderr: true
                  env:
                    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
                    ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
                    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
                    ARM_TENANT_ID: $(AZURE_TENANT_ID)
                  displayName: 'Terraform Apply'