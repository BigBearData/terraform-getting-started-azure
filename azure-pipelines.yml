name: 0.1.$(Rev:r)

trigger:
  batch: true
  branches:
    include:
      - azureaiconf.6.21

variables:
  - group: terraform-backend
  - group: terraform-version
  - name: tf_in_automation
    value: true
  - name: project_folder
    value: .
  - name: AZURE_ENV_RG
    value: rg-factual-stinkbug

stages:
  - stage: Build
    jobs:
      - job: Build

        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - checkout: self
            fetchDepth: 1

          - template: 'pipeline-templates/prepare-credentials.yml'
          - template: 'pipeline-templates/pin-terraform.yml'

          - task: Bash@3
            displayName: 'Terraform Init'
            env:
              ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AZURE_TENANT_ID)
            inputs:
              targetType: 'inline'
              workingDirectory: $(project_folder)
              script: |
                set -euo pipefail
                
                echo "Initialize"
                terraform init \
                  -input=false \
                  -backend-config="resource_group_name=${TF_STORAGE_RG}" \
                  -backend-config="storage_account_name=${TF_STORAGE_ACCOUNT}" \
                  -backend-config="container_name=${TF_STORAGE_BLOB_CONTAINER}" \
                  -backend-config="key=${TF_STORAGE_BLOB_NAME}" 

                echo "Sanity Check"
                terraform validate

                echo "Show Terraform Version and Providers"
                terraform -v
                terraform providers

          - task: Bash@3
            displayName: 'Terraform Plan'
            env:
              ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AZURE_TENANT_ID)
            inputs:
              targetType: 'inline'
              workingDirectory: $(project_folder)
              script: |
                set -euo pipefail

                if [ ${BUILD_REASON} == 'PullRequest' ]; then
                  export TF_CLI_ARGS="-lock=false"
                fi

                terraform plan \
                  -input=false \
                  -var="resource_group_name=${AZURE_ENV_RG}" \
                  -out ${BUILD_BUILDNUMBER}.tfplan

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
              replaceExistingArchive: true
            displayName: 'Create Plan Artifact'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
            displayName: 'Publish Plan Artifact'

  - stage: Deploy
    jobs:
      - deployment: DeployDev
        displayName: 'Dev Environment Deployment'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none

                - task: DownloadBuildArtifacts@0
                  inputs:
                    artifactName: 'drop'
                  displayName: 'Download Plan Artifact'

                - task: ExtractFiles@1
                  inputs:
                    archiveFilePatterns: '$(System.ArtifactsDirectory)/drop/$(Build.BuildId).tgz'
                    destinationFolder: '$(System.DefaultWorkingDirectory)/'
                    cleanDestinationFolder: false
                  displayName: 'Extract Plan Artifact'

                - template: 'pipeline-templates/prepare-credentials.yml'
                - template: 'pipeline-templates/pin-terraform.yml'

                - task: Bash@3
                  inputs:
                    filePath: './scripts/terraform-apply.sh'
                    arguments: '$(Build.SourcesDirectory)'
                    failOnStderr: true
                  env:
                    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
                    ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
                    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
                    ARM_TENANT_ID: $(AZURE_TENANT_ID)
                  displayName: 'Terraform Apply'